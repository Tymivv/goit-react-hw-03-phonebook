{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/App/App.jsx","components/Servises/localStorage.js","index.js"],"names":["ContactForm","state","name","number","handleChange","target","value","setState","handelSubmit","e","preventDefault","props","onSubmit","className","this","type","pattern","title","required","onChange","Component","ContactList","filteredContacts","onDelete","map","id","nameContact","tel","onClick","Filter","STORAGE_KEY","App","contacts","filter","addContacts","some","toLowerCase","alert","newContact","nanoid","console","log","prevState","handleFilterChange","getFilteredContacts","normalizedFilter","includes","deleteContacts","contact","savedContacts","key","JSON","parse","localStorage","getItem","error","storage","prevProps","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61daa7bb.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport './ContactForm.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n  ////// записує контакт\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n  ////передає імя і тел\r\n  handelSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onSubmit({ ...this.state });\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <form className=\"heading\" onSubmit={this.handelSubmit}>\r\n          <label>\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n              required\r\n              value={this.state.name}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <label>\r\n            Phone\r\n            <input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n              required\r\n              value={this.state.number}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <button className=\"button8\" type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types';\r\nimport './ContactList.css';\r\n\r\nconst ContactList = ({ filteredContacts, onDelete }) => (\r\n  <ul className=\"list\">\r\n    {filteredContacts.map(({ id, nameContact, tel }) => (\r\n      <>\r\n        <li className=\"item\" key={id}>\r\n          {nameContact} : {tel}\r\n        </li>\r\n        <button className=\"button9\" type=\"button\" onClick={onDelete(id)}>\r\n          Delete {nameContact}\r\n        </button>\r\n      </>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  filteredContacts: PropTypes.array,\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\nexport default ContactList;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className=\"heading\">\r\n    Find contact by name\r\n    <input\r\n      type=\"text\"\r\n      name=\"filter\"\r\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n      title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n      required\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default Filter;\r\n","import { Component } from 'react';\r\nimport ContactForm from '../ContactForm/ContactForm';\r\nimport ContactList from '../ContactList/ContactList';\r\nimport Filter from '../Filter/Filter';\r\nimport * as storage from '../Servises/localStorage';\r\n\r\nimport { nanoid } from 'nanoid';\r\n\r\nconst STORAGE_KEY = 'contacts';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [\r\n      { id: 'id-1', nameContact: 'Rosie Simpson', tel: '459-12-56' },\r\n      { id: 'id-2', nameContact: 'Hermione Kline', tel: '443-89-12' },\r\n      { id: 'id-3', nameContact: 'Eden Clements', tel: '645-17-79' },\r\n      { id: 'id-4', nameContact: 'Annie Copeland', tel: '227-91-26' },\r\n    ],\r\n    filter: '',\r\n  };\r\n  componentDidMount() {\r\n    const savedContacts = storage.get(STORAGE_KEY);\r\n    if (savedContacts) {\r\n      this.setState({ contacts: savedContacts });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { contacts } = this.state;\r\n    if (prevState.contacts !== contacts) {\r\n      storage.save(STORAGE_KEY, contacts);\r\n    }\r\n  }\r\n  ////////додає контакт\r\n\r\n  addContacts = ({ name, number }) => {\r\n    if (\r\n      this.state.contacts.some(\r\n        ({ id, nameContact, tel }) =>\r\n          nameContact.toLowerCase() === name.toLowerCase(),\r\n      )\r\n    ) {\r\n      alert(`name \"${this.state.name}\" is already in list`);\r\n      return;\r\n    }\r\n    const newContact = {\r\n      id: nanoid(),\r\n      nameContact: name,\r\n      tel: number,\r\n    };\r\n    console.log(newContact);\r\n    this.setState(prevState => ({\r\n      contacts: [...prevState.contacts, newContact],\r\n    }));\r\n  };\r\n  // шукає контакт\r\n\r\n  handleFilterChange = value => this.setState({ filter: value });\r\n\r\n  getFilteredContacts = () => {\r\n    const { contacts, filter } = this.state;\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(({ nameContact }) =>\r\n      nameContact.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  };\r\n\r\n  ////видаляє контакт\r\n\r\n  // deleteContacts = id => {\r\n  //   this.setState(prevState => ({\r\n  //     contacts: prevState.contacts.filter(contact => contact.id !== id),\r\n  //   }));\r\n  // };\r\n\r\n  deleteContacts = id => () => {\r\n    this.setState(prevState => ({\r\n      contacts: prevState.contacts.filter(contact => contact.id !== id),\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Phonebooc</h1>\r\n        <ContactForm onSubmit={this.addContacts} />\r\n\r\n        <Filter\r\n          value={this.state.filter}\r\n          onChange={e => this.handleFilterChange(e.target.value)}\r\n        />\r\n\r\n        <ContactList\r\n          onDelete={this.deleteContacts}\r\n          filteredContacts={this.getFilteredContacts()}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const save = (key, value) => {\r\n  try {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst get = key => {\r\n  try {\r\n    return JSON.parse(localStorage.getItem(key));\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst remove = key => {\r\n  try {\r\n    return localStorage.removeItem(key);\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport { get, save, remove };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}